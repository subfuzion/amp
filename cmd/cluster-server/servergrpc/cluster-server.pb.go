// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/cmd/cluster-server/servergrpc/cluster-server.proto
// DO NOT EDIT!

/*
Package servergrpc is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/cmd/cluster-server/servergrpc/cluster-server.proto

It has these top-level messages:
	AgentMes
	ClientMes
	DeclareRequest
	ServerRet
*/
package servergrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgentMes struct {
	Function string            `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	Args     map[string]string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AgentMes) Reset()                    { *m = AgentMes{} }
func (m *AgentMes) String() string            { return proto.CompactTextString(m) }
func (*AgentMes) ProtoMessage()               {}
func (*AgentMes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AgentMes) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ClientMes struct {
	Function string            `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	Args     map[string]string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ClientMes) Reset()                    { *m = ClientMes{} }
func (m *ClientMes) String() string            { return proto.CompactTextString(m) }
func (*ClientMes) ProtoMessage()               {}
func (*ClientMes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClientMes) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type DeclareRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeclareRequest) Reset()                    { *m = DeclareRequest{} }
func (m *DeclareRequest) String() string            { return proto.CompactTextString(m) }
func (*DeclareRequest) ProtoMessage()               {}
func (*DeclareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ServerRet struct {
	Ack bool `protobuf:"varint,1,opt,name=ack" json:"ack,omitempty"`
}

func (m *ServerRet) Reset()                    { *m = ServerRet{} }
func (m *ServerRet) String() string            { return proto.CompactTextString(m) }
func (*ServerRet) ProtoMessage()               {}
func (*ServerRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*AgentMes)(nil), "servergrpc.AgentMes")
	proto.RegisterType((*ClientMes)(nil), "servergrpc.ClientMes")
	proto.RegisterType((*DeclareRequest)(nil), "servergrpc.DeclareRequest")
	proto.RegisterType((*ServerRet)(nil), "servergrpc.ServerRet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ClusterServerService service

type ClusterServerServiceClient interface {
	GetClientStream(ctx context.Context, opts ...grpc.CallOption) (ClusterServerService_GetClientStreamClient, error)
	DeclareAgent(ctx context.Context, in *DeclareRequest, opts ...grpc.CallOption) (*ServerRet, error)
}

type clusterServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServerServiceClient(cc *grpc.ClientConn) ClusterServerServiceClient {
	return &clusterServerServiceClient{cc}
}

func (c *clusterServerServiceClient) GetClientStream(ctx context.Context, opts ...grpc.CallOption) (ClusterServerService_GetClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterServerService_serviceDesc.Streams[0], c.cc, "/servergrpc.ClusterServerService/GetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterServerServiceGetClientStreamClient{stream}
	return x, nil
}

type ClusterServerService_GetClientStreamClient interface {
	Send(*ClientMes) error
	Recv() (*ClientMes, error)
	grpc.ClientStream
}

type clusterServerServiceGetClientStreamClient struct {
	grpc.ClientStream
}

func (x *clusterServerServiceGetClientStreamClient) Send(m *ClientMes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterServerServiceGetClientStreamClient) Recv() (*ClientMes, error) {
	m := new(ClientMes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterServerServiceClient) DeclareAgent(ctx context.Context, in *DeclareRequest, opts ...grpc.CallOption) (*ServerRet, error) {
	out := new(ServerRet)
	err := grpc.Invoke(ctx, "/servergrpc.ClusterServerService/DeclareAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterServerService service

type ClusterServerServiceServer interface {
	GetClientStream(ClusterServerService_GetClientStreamServer) error
	DeclareAgent(context.Context, *DeclareRequest) (*ServerRet, error)
}

func RegisterClusterServerServiceServer(s *grpc.Server, srv ClusterServerServiceServer) {
	s.RegisterService(&_ClusterServerService_serviceDesc, srv)
}

func _ClusterServerService_GetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServerServiceServer).GetClientStream(&clusterServerServiceGetClientStreamServer{stream})
}

type ClusterServerService_GetClientStreamServer interface {
	Send(*ClientMes) error
	Recv() (*ClientMes, error)
	grpc.ServerStream
}

type clusterServerServiceGetClientStreamServer struct {
	grpc.ServerStream
}

func (x *clusterServerServiceGetClientStreamServer) Send(m *ClientMes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterServerServiceGetClientStreamServer) Recv() (*ClientMes, error) {
	m := new(ClientMes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClusterServerService_DeclareAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServerServiceServer).DeclareAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servergrpc.ClusterServerService/DeclareAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServerServiceServer).DeclareAgent(ctx, req.(*DeclareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servergrpc.ClusterServerService",
	HandlerType: (*ClusterServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeclareAgent",
			Handler:    _ClusterServerService_DeclareAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientStream",
			Handler:       _ClusterServerService_GetClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/cmd/cluster-server/servergrpc/cluster-server.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x3b, 0x6d, 0xbf, 0x8f, 0xe6, 0x28, 0x2a, 0x43, 0x85, 0x12, 0x50, 0x4b, 0x70, 0xd1,
	0x8d, 0x89, 0xb4, 0x0b, 0xc5, 0x5d, 0xa9, 0xc5, 0x95, 0x2e, 0xd2, 0x2b, 0x98, 0x8e, 0xc7, 0x18,
	0x9a, 0x3f, 0xcf, 0x4c, 0x0a, 0xbd, 0x0e, 0xf1, 0x06, 0xbc, 0x52, 0xc9, 0x24, 0xa6, 0x8d, 0x74,
	0xe1, 0xc2, 0xcd, 0xcc, 0xf9, 0x79, 0xcf, 0xcb, 0x33, 0x9c, 0x81, 0xa7, 0x20, 0xd4, 0xaf, 0xf9,
	0xd2, 0x95, 0x69, 0xec, 0x89, 0x2c, 0x93, 0x18, 0x21, 0x09, 0x9d, 0x92, 0x27, 0xe2, 0xcc, 0x93,
	0xf1, 0xb3, 0x27, 0xa3, 0x5c, 0x69, 0xa4, 0x2b, 0x85, 0xb4, 0x46, 0xf2, 0xca, 0x2b, 0xa0, 0x4c,
	0xfe, 0xe8, 0xb8, 0x19, 0xa5, 0x3a, 0xe5, 0xb0, 0x15, 0x38, 0xef, 0x0c, 0x7a, 0xd3, 0x00, 0x13,
	0xfd, 0x88, 0x8a, 0xdb, 0xd0, 0x7b, 0xc9, 0x13, 0xa9, 0xc3, 0x34, 0x19, 0xb0, 0x21, 0x1b, 0x59,
	0x7e, 0x9d, 0xf3, 0x31, 0x74, 0x05, 0x05, 0x6a, 0xd0, 0x1e, 0x76, 0x46, 0x07, 0xe3, 0x73, 0x77,
	0xeb, 0xe1, 0x7e, 0xcf, 0xbb, 0x53, 0x0a, 0xd4, 0x3c, 0xd1, 0xb4, 0xf1, 0x8d, 0xd6, 0xbe, 0x01,
	0xab, 0x2e, 0xf1, 0x13, 0xe8, 0xac, 0x70, 0x53, 0xf9, 0x16, 0x21, 0xef, 0xc3, 0xbf, 0xb5, 0x88,
	0x72, 0x1c, 0xb4, 0x4d, 0xad, 0x4c, 0xee, 0xda, 0xb7, 0xcc, 0xf9, 0x60, 0x60, 0xcd, 0xa2, 0xf0,
	0x17, 0x58, 0x93, 0x06, 0xd6, 0xc5, 0x2e, 0x56, 0x6d, 0xf0, 0x77, 0x5c, 0x97, 0x70, 0x74, 0x8f,
	0x32, 0x12, 0x84, 0x3e, 0xbe, 0xe5, 0xa8, 0x34, 0xe7, 0xd0, 0x4d, 0x44, 0x8c, 0xd5, 0xb8, 0x89,
	0x9d, 0x33, 0xb0, 0x16, 0x06, 0xc3, 0x47, 0x5d, 0xd8, 0x0b, 0xb9, 0x32, 0xfd, 0x9e, 0x5f, 0x84,
	0xe3, 0x4f, 0x06, 0xfd, 0x59, 0xb9, 0x97, 0x52, 0x56, 0x9c, 0xa1, 0x44, 0x3e, 0x87, 0xe3, 0x07,
	0xd4, 0x25, 0xf6, 0x42, 0x13, 0x8a, 0x98, 0x9f, 0xee, 0x7d, 0x90, 0xbd, 0xbf, 0xec, 0xb4, 0x46,
	0xec, 0x9a, 0xf1, 0x19, 0x1c, 0x56, 0x90, 0x66, 0x31, 0xdc, 0xde, 0x15, 0x37, 0xf1, 0x9b, 0x46,
	0x35, 0xb4, 0xd3, 0x5a, 0xfe, 0x37, 0x5f, 0x65, 0xf2, 0x15, 0x00, 0x00, 0xff, 0xff, 0x81, 0x61,
	0x80, 0xec, 0x7c, 0x02, 0x00, 0x00,
}
